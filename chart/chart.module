<?php

/**
 * Implements hook_init().
 */
function chart_init()
{
      drupal_add_js("http://omnipotent.net/jquery.sparkline/2.1.2/jquery.sparkline.min.js",'external');
}



function chart_show_all($div_name){ ?>
        <script src=http://code.jquery.com/jquery-1.9.1.js> </script>
        <?php
        $testbed = $_GET['testbed'];
        if(isset($_GET['capabilities'])&& ($_GET['capabilities']!="0")){
         $nodeUrn = urldecode($_GET["nodes"]);
         $capabilityUrn = urldecode($_GET["capabilities"]);
         if (($_GET['from']!=NULL)&&($_GET['to'])!=NULL){
             $from = explode('-',urldecode($_GET['from']));
             $to =explode('-',urldecode($_GET['to']));
             $date_from = mktime($from[3],$from[4],$from[5],$from[1],$from[2],$from[0])*1000;
             $date_to = mktime($to[3],$to[4],$to[5],$to[1],$to[2],$to[0])*1000;
             chart_graph($testbed,$nodeUrn,$capabilityUrn,$date_from,$date_to,$div_name);
         }else{
             chart_graph($testbed,$nodeUrn,$capabilityUrn,0,0,$div_name);
         }
      }//end if
        ?>
    <script type="text/javascript">

        function showNodes(str){
            console.log("Testbed "+str);
             var url='/uberdust/misc/data.php?q=http://uberdust.cti.gr/rest/testbed/'+str+'/node/raw';
             $.get(url,function(data){
                   var nodes=data.split("\n");
                   if(str =="0"){
                        document.capform.nodes.options[0]=new Option("Select Node:","0");
                        document.capform.nodes.options.length=1;
                   }else{
                        document.capform.nodes.options[0]=new Option("Select Node:","0");
                        for(var i=0;i<nodes.length;i++){
                            document.capform.nodes.options[i+1]=new Option(nodes[i], nodes[i]);
                        }
                        document.capform.nodes.options.length=nodes.length;
                   }
            });

        }//end of showNodes

        function showCapabilities(str)
        {
            var capability= new Array();
            if(str =="0"){
                document.capform.capabilities.options[0]=new Option("Select Capability:","0");
                document.capform.capabilities.options.length=1;
            }else{
                var testbed= document.getElementById("testbed").value;
                var url='/uberdust/misc/data.php?q=http://uberdust.cti.gr/rest/testbed/'+testbed+'/node/'+str+'/capabilities';
                $.get(url,function(data){
                    var lines=data.split('\n');
                    var i, j, k=0;
                    document.capform.capabilities.options[0]=new Option("Select Capability:","0");
                    for(i=0;i<lines.length;i++){
                        var urn = lines[i].split(":");
                        if(urn[0]=="urn"){
                            k++;
                            capability[k]="";
                            for(j=0;j<(urn.length-1);j++){
                                capability[k]=capability[k]+urn[j]+':';
                            }
                            var name = urn[urn.length-1];
                            var value = capability[k]+urn[urn.length-1];
                            document.capform.capabilities.options[i+1]=new Option("capability "+k,value);
                        }
                    }
                    document.capform.capabilities.options.length=capability.length;
                });
            }
        }//end of showCapabilities

        function onSubmit()
        {   nodes=document.getElementById("nodes").value;
            capabilities=document.getElementById("capabilities").value;
            submit=document.getElementById("submit").value;
            from= document.getElementById("from").value;
            to= document.getElementById("to").value;

            var xmlhttp;
            if (window.XMLHttpRequest)
            {// code for IE7+, Firefox, Chrome, Opera, Safari
                xmlhttp=new XMLHttpRequest();
            }
            else
            {// code for IE6, IE5
                xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
            }
            xmlhttp.onreadystatechange=function()
            {
                if (xmlhttp.readyState==4 && xmlhttp.status==200)
                {
                    document.getElementById("container").innerHTML=xmlhttp.responseText;
                }
            }
            xmlhttp.open("GET","chart.php?t=" + Math.random()+"&node="+nodes+"&capabilities="+capabilities+"&from="+from+"&to="+to,true);
            xmlhttp.send();

        }

    </script>
    <form id="theForm" name = "capform" onSubmit="JavaScript:onSubmit()" accept-charset="utf-8" >
                <select id = "testbed" name="testbed"onchange="showNodes(this.value)">
                        <option value="0">Select Testbed:</option>
                    <? for($i=1;$i<=6;$i++){ ?>
                        <option value="<?echo $i;?>">Testbed <?echo $i;?></option>
                    <?  }   ?>
                </select>
                <select id = "nodes" name= "nodes" onchange="showCapabilities(this.value)">
                        <option value="0">Select Node:</option>
                </select>
                <select id="capabilities" name= "capabilities">
                        <option value="0">Select Capability:</option>
                </select>
                From: <input id ="from" type="text" name="from" placeholder="2013-06-17-10-00-00">
                To:   <input id ="to" type="text" name="to" placeholder="2013-06-17-12-00-00"><br><br>
                <br><br>
                <input type="submit" id="submit" value="Show Chart" onClick="JavaScript:onSubmit()">
                <br><br>
            </form>
<?php
}//end of function

function chart_graph($testbed,$node,$capability,$from,$to,$div_name){
    $chart_color =  variable_get('chart_color','#000');
    $node_prefix="";
    $cap_prefix="";
    $temp_node  =explode(":",$node);
    $temp_capability = explode(":",$capability);
    for($i=0;$i<count($temp_node)-1;$i++){
        $node_prefix=$node_prefix.$temp_node[$i].":";
    }
    for($i=0;$i<count($temp_capability)-1;$i++){
        $cap_prefix=$cap_prefix.$temp_capability[$i].":";
    }
    $node = urldecode($temp_node[count($temp_node)-1]);
    $capability = $temp_capability[count($temp_capability)-1];

    $timezone= file_get_contents("http://uberdust.cti.gr/rest/testbed/".$testbed."/timezone");
    $offset = file_get_contents("http://uberdust.cti.gr/rest/testbed/".$testbed."/timezone/offset");
    $from=intval($from) ;//+ intval($offset);
    $to = intval($to) ;//+ intval($offset);

    ?>
    <script>
        console.log('<?php echo "http://uberdust.cti.gr/rest/testbed/".$testbed."/node/".$node_prefix.$node."/capability/".$cap_prefix.$capability."/tabdelimited/from/".$from."/to/".$to."/";?>');
        var chart;
        $(document).ready(function() {
            chart = new Highcharts.Chart({
                chart: {
                    renderTo: '<?php echo $div_name;?>',
                    defaultSeriesType: 'spline',
                    zoomType: 'x',
                    spacingRight: 20,
                    borderRadius: 0,
                    backgroundColor:'<?php echo $chart_color;?>'
                },
                title: {
                    text: '<?=$capability?> chart inside <?=$node?>',
                    color: '#FFFFFF'


                },
                credits: {
                    enabled: false
                },

                xAxis: {
                    title: {
                        text: '<?php echo  $timezone;?>'
                    },
                    type: 'datetime',
                    dateTimeLabelFormats: {
                        day: '%e %b',
                        month: '%e %b'
                    },
                    tickPixelInterval: 400,
                    maxZoom: 1000
                },
                yAxis: {
                    title: {
                        text: '<?= $capability?>'
                    },
                    min: 0.6,
                    startOnTick: false,
                    showFirstLabel: false
                },
                tooltip: {
                    shared: true
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                plotOptions: {
                    series: {
                        lineWidth: 1,
                        marker: {
                            enabled: false,
                            states: {
                                hover: {
                                    enabled: true,
                                    radius: 5
                                }
                            }
                        }
                    }
                },
                series: [
                    {
                        name: '<?= $capability?> reading',
                        data: [
                            <?
                            if(($from==0)&&($to==0))
                            {
                                 $tabdelimited = file_get_contents("http://uberdust.cti.gr/rest/testbed/".$testbed."/node/".$node_prefix.$node."/capability/".$cap_prefix.$capability."/tabdelimited/limit/10");
                            }else{
                                  $tabdelimited = file_get_contents("http://uberdust.cti.gr/rest/testbed/".$testbed."/node/".$node_prefix.$node."/capability/".$cap_prefix.$capability."/tabdelimited/from/".$from."/to/".$to."/");

                            }
                            $lines = explode("\n", $tabdelimited);
                            unset($lines[count($lines)-1]);

                            $firstRow = explode("\t", $lines[0]);
                            unset($lines[0]);
                            $data="[".( intval($offset) + intval($firstRow[0]))." , ".$firstRow[1]."]";
                            foreach ($lines as $thisLine) {
                                 $row = explode("\t", $thisLine);
                                 $data=" [".(intval($offset)+intval($row[0]))." , ".$row[1]."],".$data;
                            }
                            print($data);

                            ?>
                        ]
                    }
                ]
            });
        });
    </script>



<?php
}//end of graph()

    function chart_speedometer($testbed,$node,$capability,$div_name){
        $chart_color =  variable_get('chart_color','#000');
        $node_prefix="";
        $cap_prefix="";
        $temp_node  =explode(":",$node);
        $temp_capability = explode(":",$capability);
        for($i=0;$i<count($temp_node)-1;$i++){
            $node_prefix=$node_prefix.$temp_node[$i].":";
        }
        for($i=0;$i<count($temp_capability)-1;$i++){
            $cap_prefix=$cap_prefix.$temp_capability[$i].":";
        }
        $node = $temp_node[count($temp_node)-1];
        $capability = $temp_capability[count($temp_capability)-1];
        ?>
        <script>
            var chart_gauge;
            chart_gauge = new Highcharts.Chart({

                    chart: {
                        renderTo: '<?php echo $div_name;?>',
                        type: 'gauge',
                        plotBackgroundColor: '<?php echo $chart_color;?>',
                        plotBackgroundImage: null,
                        plotBorderWidth: 0,
                        plotShadow: false

                    },

                    title: {
                        text: '<?php echo $capability;?> now!'
                    },
                    credits: {
                        enabled: false
                    },
                    pane: {
                        startAngle: -140,
                        endAngle: 140,
                        background: [
                            {
                                backgroundColor: {
                                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                                    stops: [
                                        [0, '#FFF'],
                                        [1, '#333']
                                    ]
                                },
                                borderWidth: 0,
                                outerRadius: '109%'
                            },
                            {
                                backgroundColor: {
                                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                                    stops: [
                                        [0, '#333'],
                                        [1, '#FFF']
                                    ]
                                },
                                borderWidth: 1,
                                outerRadius: '107%'
                            },
                            {
                                // default background
                            },
                            {
                                backgroundColor: '#FFF',
                                borderWidth: 0,
                                outerRadius: '105%',
                                innerRadius: '103%'
                            }
                        ]
                    },

                    // the value axis
                    yAxis: {
                        min: 0,
                        max: 100,
                        minorTickInterval: 'auto',
                        minorTickWidth: 1,
                        minorTickLength: 10,
                        minorTickPosition: 'inside',
                        minorTickColor: '#666',

                        tickPixelInterval: 30,
                        tickWidth: 2,
                        tickPosition: 'inside',
                        tickLength: 10,
                        tickColor: '#666',
                        labels: {
                            step: 2,
                            rotation: 'auto'
                        },
                        title: {
                            text: '(%)'
                        },
                        plotBands: [{
                            from: 0,
                            to: 40,
                            color: '#95B9C7	' // grey
                        },{
                            from: 30,
                            to: 70,
                            color: '#3090C7' // green
                        }, {
                            from: 70,
                            to: 100,
                            color: '#0000A0' // yellow
                        }]

                    },

                    series: [{
                        name: '<?=$capability?>',
                        data: [<?php
                $latestreading = file_get_contents("http://uberdust.cti.gr/rest/testbed/$testbed/node/".$node_prefix.$node."/capability/".$cap_prefix.$capability."/latestreading");
                $row = explode("\t", $latestreading);
                echo $row[1];
                 ?>
                        ],
                        tooltip: {
                            valueSuffix: ' %'
                        }
                    }],
                    exporting: { enabled: false }
                },
                // Add some life

                function (chart_gauge){
                    if (!chart_gauge.renderer.forExport) {
                        setInterval(function () {
                            var point_gauge = chart_gauge.series[0].points[0],
                                newVal_gauge = window.<?=$capability?>;
                            // inc = Math.round((Math.random() - 0.5) * 20);
                            point_gauge.update(parseFloat(newVal_gauge));
                        }, 3000);
                    }
                });
            window.<?=$capability?>=<?php echo $row[1];?> ;
            chart_gauge.setSize(300, 300, false);
            connect("uberdust.cti.gr", "<?php echo $node_prefix.$node;?>" , "<?php echo $cap_prefix.$capability;?>",function(value2add){
                var val= new Array();
                val=value2add.split(" ");
                window.<?=$capability?> =val[8];
            });
        </script>
    <?php
    }
function chart_direction($testbed,$node,$capability,$div_name){
    $chart_color =  variable_get('chart_color','#000');
    $node_prefix="";
    $cap_prefix="";
    $temp_node  =explode(":",$node);
    $temp_capability = explode(":",$capability);
    for($i=0;$i<count($temp_node)-1;$i++){
        $node_prefix=$node_prefix.$temp_node[$i].":";
    }
    for($i=0;$i<count($temp_capability)-1;$i++){
        $cap_prefix=$cap_prefix.$temp_capability[$i].":";
    }
    $node = $temp_node[count($temp_node)-1];
    $capability = $temp_capability[count($temp_capability)-1];
    ?>
     <script>
    var gauge_wind = new Highcharts.Chart({

        chart: {
        renderTo: '<?php echo $div_name;?>',
                        type: 'gauge',
                        plotBackgroundColor: '<?php echo $chart_color;?>'

        },

        maskColor:'<?php echo $chart_color; ?>',
        title: {
            text: null
        },
        title: {
            text: 'Wind Direction'
        },
        credits: {
             enabled: false
        },
        pane: {
            startAngle: 0,
            endAngle: 360
        },

         // the value axis
        yAxis: {
             min: 0,
             max: 360,
             minorTickInterval: 30,
             tickInterval: 90,
             labels: {
             distance: 15,
             formatter: function () {
                return { 0: 'N', 90: 'W', 180: 'S', 270: 'W' }[this.value];
                            }
                        }
        },

        series: [{
            name: 'Wind direction',
            data: [<?php
                        $latestreading = file_get_contents("http://uberdust.cti.gr/rest/testbed/".$testbed."/node/".$node_prefix.$node."/capability/".$cap_prefix.$capability."/latestreading");
                        $row = explode("\t", $latestreading);
                        echo $row[1];
                  ?>],
            tooltip: {
                 valueSuffix: ' deg'
            },
            dial: {
                   baseWidth: 1,
                   topWidth: 6,
                   baseLength: 10
            }
        }],
        exporting: { enabled: false }
    },
                // Add some life
            function (gauge_wind) {
                if (!gauge_wind.renderer.forExport) {
                    setInterval(function () {
                        var point =gauge_wind.series[0].points[0],
                            newVal = window.winddirection;
                        // inc = Math.round((Math.random() - 0.5) * 20);
                        point.update(parseFloat(newVal));
                    }, 3000);
                }
            });
            window.<?=$capability?>=<?php echo $row[1];?>;
            gauge_wind.setSize(300, 300, false);

            connect("uberdust.cti.gr", "<?php echo $node_prefix.$node;?>" , "<?php echo $cap_prefix.$capability;?>",function(value2add){
                var val= new Array();
                val=value2add.split(" ");
                window.<?=$capability?> =val[8];

            });
</script>


<?php
}

function chart_sparkline($testbed,$node,$capability,$from,$to,$div_name){ ?>

   <?php
         drupal_add_js("http://omnipotent.net/jquery.sparkline/2.1.2/jquery.sparkline.min.js",'external');

    $node_prefix="";
    $cap_prefix="";
    $temp_node  =explode(":",$node);
    $temp_capability = explode(":",$capability);
    for($i=0;$i<count($temp_node)-1;$i++){
        $node_prefix=$node_prefix.$temp_node[$i].":";
    }
    for($i=0;$i<count($temp_capability)-1;$i++){
        $cap_prefix=$cap_prefix.$temp_capability[$i].":";
    }
    $node = $temp_node[count($temp_node)-1];
    $capability = $temp_capability[count($temp_capability)-1];
    if(($from==0)&&($to==0))
    {
        $tabdelimited = file_get_contents("http://uberdust.cti.gr/rest/testbed/".$testbed."/node/".$node_prefix.$node."/capability/".$cap_prefix.$capability."/tabdelimited/limit/10");
    }else{
        $tabdelimited = file_get_contents("http://uberdust.cti.gr/rest/testbed/".$testbed."/node/".$node_prefix.$node."/capability/".$cap_prefix.$capability."/tabdelimited/from/".$from."/to/".$to."/");

    }
    ?>
    <script type="text/javascript">

    <?php
    $lines = explode("\n", $tabdelimited,10);
    unset($lines[count($lines)-1]);
    $hours = array();
    for ($j=0;$j<10;$j++){
        $hourt="0".$j;
        $hours[$hourt]=0;
    }
    for ($j=10;$j<24;$j++){
        $hourt="".$j;
        $hours[$hourt]=0;
    }
    $firstRow = explode("\t", $lines[0]);
    $i = date("H",$firstRow[0]);
    $hours[$i]++;
    unset($lines[0]);
    foreach ($lines as $thisLine) {
        $row = explode("\t", $thisLine);
        $i = date("H",$row[0]/1000);
        //print($i."\t".date("c",$row[0]/1000)."\n");
        $hours[$i]++;
    }


    ksort($hours);
    
    $hstring = "$(\"#".$div_name."\").sparkline([";

    foreach ($hours as $key => $value) {
        $hstring .= $value .",";
    }
    $hstring = rtrim($hstring, ",");
    $hstring = $hstring. "],{type: 'line',width: '100%',height: '100px'});";
    echo $hstring."</script>";
}

function chart_admin() {
    $form = array();

    $form['chart_color'] = array(
        '#type' => 'textfield',
        '#title' => t('Chart Background Color'),
        '#default_value' => variable_get('chart_color', '#FFF'),
        '#size' => 7,
        '#maxlength' => 7,
        '#description' => t("The chart background color"),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function chart_menu() {

    $items = array();

    $items['admin/settings/chart'] = array(
        'title' => 'Chart module settings',
        'description' => 'Description of your Chart settings page',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('chart_admin'),
        'access arguments' => array('administer chart settings'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}
